package com.hc.repositories;

import com.hc.model.KpisMonitor;
import com.hc.model.KpisResults;
import com.hc.model.ProjectDashBoard;
import com.hc.model.ProjectResults;
import com.hc.model.PrtsLookupMainCode;
import com.hc.model.PrtsProject;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.stereotype.Repository;

/**
* Generated by Spring Data Generator on 02/07/2022
*/
@Repository
public interface PrtsProjectRepository extends JpaRepository<PrtsProject, Long>, JpaSpecificationExecutor<PrtsProject>, QuerydslPredicateExecutor<PrtsProject> {

	@Query(value="select PROJECT_STATUS as project_status_id,PROJECT_ID,PROJECT_NAME,\r\n"
			+ "TOTAL_AMOUNT,DEPTARTMENT_NAME,REGION_NAME,INITIATIVE_NAME,PROJECTSTATUS_NAME,CITY_NAME\r\n"
			+ "from prts_project_main_info\r\n"
			+ "where \r\n"
			+ "(department_id in((select regexp_substr(:P_DEPT_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_DEPT_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or :P_DEPT_ID is null)  and \r\n"
			+ "(REGION_ID in ((select regexp_substr(:P_REG_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_REG_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or :P_REG_ID is null) and \r\n"
			+ "(INITIATIVE_ID in ((select regexp_substr(:P_INIT_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_INIT_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or (:P_INIT_ID) is null) and\r\n"
			+ "(WORK_AREA_ID in ((select regexp_substr(:P_WO_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_WO_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or (:P_WO_ID) is null) and\r\n"
			+ "(CONTRACT_STATUS in ((select regexp_substr(:P_CON_STAT_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_CON_STAT_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or TO_NUMBER(:P_CON_STAT_ID) is null) and \r\n"
			+ "(EXECUTION_STATUS in ((select regexp_substr(:P_EXE_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_EXE_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or (:P_EXE_ID) is null) and \r\n"
			+ "(PROJECT_STATUS  in ((select regexp_substr(:P_PROJ_STATUS_ID,'[^,]+', 1, level) as value \r\n"
			+ "   from dual \r\n"
			+ "   connect BY regexp_substr(:P_PROJ_STATUS_ID, '[^,]+', 1, level) \r\n"
			+ "   is not null)) or :P_PROJ_STATUS_ID is null)\r\n"
			+ "", nativeQuery = true)
	public List<ProjectResults> GeneralProjectFilter(String P_DEPT_ID,String P_REG_ID,String P_INIT_ID
			,String P_WO_ID,String P_CON_STAT_ID,String P_EXE_ID,String P_PROJ_STATUS_ID);
	
	
	@Query(value="  select\r\n"
			+ "        plan.Project_id,\r\n"
			+ "        sum(ACTUAL_EXEC_AMOUNT) as TOTAL_AMOUNT      ,\r\n"
			+ "        sum(ACTUAL_PERCENTAGE*(info.ITEM_WEIGHT/100)) as EXEC_PERCENTAGE     ,\r\n"
			+ "        \r\n"
			+ "            round(((LAST_DAY(to_date(('01'||'_'||:P_MONTH||'_'||:P_YEAR),\r\n"
			+ "            'dd-MM-YYYY'))-min(proj.start_date))/(min(proj.end_date)-min(proj.start_date)))*100,\r\n"
			+ "            0) as TimeExecuted,\r\n"
			+ "            min(EXPERT_NAME)EXPERT_NAME,\r\n"
			+ "            min(CONTRACTOR_NAME)CONTRACTOR_STATUS_NAME,\r\n"
			+ "            min(TOTAL_AMOUNT)PROJECT_AMOUNT,\r\n"
			+ "            min(START_DATE)PROJECT_STARTDATE,\r\n"
			+ "            min(END_DATE)PROJECT_ENDDATE,\r\n"
			+ "        (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.DEPARTMENT_ID)DEPT_NAME,\r\n"
			+ "        (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.REGION_ID) REGION_NAME,\r\n"
			+ "                (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.INITIATIVE_ID)INIT_NAME,\r\n"
			+ "        (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.WORK_AREA_ID)WORKAREA_NAME,\r\n"
			+ "                (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.CONTRACT_STATUS)CONTRACT_STATUS_NAME,\r\n"
			+ "        (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.EXECUTION_STATUS)EXEC_STATUS_NAME,\r\n"
			+ "                (select LOOKUP_MAIN_NAME from prts_Lookup_main_code where LOOKUP_ID =proj.PROJECT_STATUS)PROJECT_STATUS\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "    from\r\n"
			+ "       prts_project proj, prts_project_items_planning plan      ,\r\n"
			+ "        prts_project_items info      \r\n"
			+ "    where\r\n"
			+ "       proj.project_id=plan.project_id and  plan.item_id=info.item_id       \r\n"
			+ "        and  plan.project_id=:PROJ_ID \r\n"
			+ "        and month<=:P_MONTH\r\n"
			+ "        and year<=:P_YEAR       \r\n"
			+ "    GROUP by\r\n"
			+ "        plan.Project_id,proj.DEPARTMENT_ID,proj.REGION_ID,\r\n"
			+ "        proj.INITIATIVE_ID,proj.WORK_AREA_ID,proj.CONTRACT_STATUS,proj.EXECUTION_STATUS,proj.PROJECT_STATUS", nativeQuery = true)
	public List<ProjectDashBoard> getAllProjectDashboard(Integer PROJ_ID,Integer P_MONTH,Integer P_YEAR);

	 public default List<KpisResults> calculateKpis(KpisMonitor criteria) {
		 
		       StringBuilder select = new StringBuilder();
		       StringBuilder groupby = new StringBuilder();
		       StringBuilder whereCond=new StringBuilder();

		        // SELECT
		       select.append("SELECT " + System.lineSeparator());
		        if(criteria.getFirstSide()!=null&&!criteria.getFirstSide().isEmpty()) {
		        	select.append(criteria.getFirstSide()+" as FirstSide");
		        	groupby.append("group by "+criteria.getFirstSide());
		        	whereCond.append("where "+criteria.getFirstSide()+" in (:F)");
		        }
		        if(criteria.getSecondSide()!=null&&!criteria.getSecondSide().isEmpty()) {
		        	select.append(","+criteria.getSecondSide()+" as SecondSide");
		        	groupby.append(","+criteria.getSecondSide());
		        	whereCond.append("and " +criteria.getSecondSide()+" in (:S)");
		        }
		        select.append(",sum(total_amount) as AmountSum,count(*) as ProjectCount  from prts_project");
		         
		        System.out.println(select);
		        System.out.println(whereCond);
		        System.out.println(groupby);

		        System.out.println(select +" "+System.lineSeparator()+whereCond+" "+System.lineSeparator()+groupby);
		        
		         return null;
		        
		       
		  }


}
