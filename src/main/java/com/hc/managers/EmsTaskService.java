package com.hc.managers;

import com.hc.model.EmsProjectExpert;
import com.hc.model.EmsProjectExpert_;
import com.hc.model.EmsTask;
import com.hc.model.EmsTaskPK;
import com.hc.model.EmsTaskStatusCode;
import com.hc.model.EmsTask_;
import com.hc.repositories.EmsTaskRepository;
import com.hc.security.administration.UserRepo;
import com.hc.security.administration.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

/**
 * Generated by Spring Data Generator on 01/01/2022
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class EmsTaskService {

	private EmsTaskRepository emsTaskRepository;

	public static Specification<EmsTask> getTasksSpecs(Long ExpertId, Long ProjectId) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.equal(root.get(EmsTask_.emsExpert), ExpertId);
		};
	}

	public static Specification<EmsTask> getTasksprojects(Long ExpertId, Long ProjectId) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.equal(root.get(EmsTask_.id).get("projectId"), ProjectId);
		};
	}

	public static Specification<EmsTask> getReadyTasksSpec(int TaskStatus) {
		return (root, query, criteriaBuilder) -> {
			return criteriaBuilder.equal(root.get(EmsTask_.emsTaskStatusCode).get("taskStatusId"), TaskStatus);
		};
	}

	@Autowired
	public EmsTaskService(EmsTaskRepository emsTaskRepository) {
		this.emsTaskRepository = emsTaskRepository;
	}

	public List<EmsTask> GetExpertProjects(Long ExpertId, Long ProjectId) {
		return emsTaskRepository
				.findAll((getTasksSpecs(ExpertId, ProjectId)).and(getTasksprojects(ExpertId, ProjectId)));
	}
	public List<EmsTask> GetProjectTasks(Long ExpertId, Long ProjectId) {
		return emsTaskRepository
				.findAll((getTasksprojects(ExpertId, ProjectId)));
	}

	public List<EmsTask> GetExpertReadyTasks(Long ExpertId, Long ProjectId) {
		return emsTaskRepository.findAll((getTasksSpecs(ExpertId, ProjectId).and(getReadyTasksSpec(10))));
	}

	public boolean AcceptTask(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(4);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;
	}
	
	

	public boolean RejectTask(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(6);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;

	}

	
	public boolean StartTask(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(7);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;

	}

	public boolean CompleteTask(Long TaskId, Long ProjectId, BigDecimal ActualHours, BigDecimal ActualMinutes) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(8);
		tsk.setEmsTaskStatusCode(stat);
		tsk.setTaskActualHour(ActualHours);
		tsk.setTaskActualMinute(ActualMinutes);

		emsTaskRepository.save(tsk);
		return true;

	}

	public boolean PauseTask(Long TaskId, Long ProjectId, BigDecimal ActualHours, BigDecimal ActualMinutes) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		tsk.setTaskActualHour(ActualHours);
		tsk.setTaskActualMinute(ActualMinutes);

		emsTaskRepository.save(tsk);
		return true;

	}

	public boolean AcceptTaskFromAdmin(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(3);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;
	}
	public boolean RejectTaskFromAdmin(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(5);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;
	}
	
	public boolean AcceptTaskRevision(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(10);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;
	}
	
	public boolean ReturnTaskToExpert(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);
		EmsTaskStatusCode stat = new EmsTaskStatusCode();
		stat.setTaskStatusId(7);
		tsk.setEmsTaskStatusCode(stat);
		emsTaskRepository.save(tsk);
		return true;
	}
	
	
	
	public EmsTask getEmsTask(Long TaskId, Long ProjectId) {
		EmsTaskPK tmp = new EmsTaskPK();
		tmp.setProjectId(ProjectId);
		tmp.setTaskId(TaskId);
		EmsTask tsk = emsTaskRepository.getById(tmp);

		return tsk;

	}

	public EmsTask AddTask(EmsTask tsk) {
		return emsTaskRepository.save(tsk);
	}

}
